/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2017. MIT licensed.
 */
!function(t,e,n,o){"use strict";function a(e){t(".wdw").hide(),t("#"+e).show()}function l(){var e=JSON.parse(localStorage.events);e.forEach(function(e){t("#event-listing tbody").append('<tr data-event-id="'+e.id+'">\t\t\t\t\t\t\t\t\t\t<td>'+e.name+"</td>\t\t\t\t\t\t\t\t\t\t<td>"+e.topic+"</td>\t\t\t\t\t\t\t\t\t\t<td>"+e.speaker+"</td>\t\t\t\t\t\t\t\t\t\t<td>"+e.date.day+" "+e.date.month+" "+e.date.year+"</td>\t\t\t\t\t\t\t\t\t\t<td>"+e.time_24h.hour+":"+e.time_24h.minute+'</td>\t\t\t\t\t\t\t\t\t\t<td>\t\t\t\t\t\t\t\t\t\t\t<i class="fa fa-pencil" id="edit-event-icon" aria-hidden="true"></i>\t\t\t\t\t\t\t\t\t\t\t<i class="fa fa-trash" id="delete-event-icon" aria-hidden="true"></i>\t\t\t\t\t\t\t\t\t\t</td>\t\t\t\t\t\t\t\t\t</tr>\t\t\t')})}function i(t,e,n,o){var a=t.toLowerCase(),l=e.toLowerCase();console.log("The input value is: "+a),console.log("The JSON data to compare is: "+l);var i=l.includes(a);console.log("The bool = "+i),1==i?(console.log("Match made"),o.push(n)):console.log("False")}function s(){t("#linkRegister").fadeOut(500),t("#linkLogin").fadeOut(500),t("#linkLogout").fadeIn(500)}function c(){var t,e,o,a,l,i;for(t=n.getElementById("searchfront"),e=t.value.toUpperCase(),o=n.getElementById("effect-milo"),a=o.getElementsByTagName("location"),console.log(a),i=0;i<a.length;i++)l=a[i].getElementById("span")[0],console.log(l),console.log(a[i]+a),l&&(l.innerHTML.toUpperCase().indexOf(e)>-1?(a[i].style.display="",console.log(a[i])):(a[i].style.display="none",console.log(a[i])))}function d(){var t,e,o,a,l,i;for(t=n.getElementById("myInput"),e=t.value.toUpperCase(),o=n.getElementById("myTable"),a=o.getElementsByTagName("tr"),i=0;i<a.length;i++)l=a[i].getElementsByTagName("td")[0],l&&(l.innerHTML.toUpperCase().indexOf(e)>-1?a[i].style.display="":a[i].style.display="none")}function r(){var e=t("#inputpostimg").val(),n=t("#inputposttitel").val(),o=t("#inputpostdesc").val(),a=t("#inputpostlocation").val(),l={postimageurl:e,posttitel:n,postdesc:o,postloc:a};console.log(l)}function g(){var t={username:"username",password:"password"};localStorage.setItem("credentials",JSON.stringify(t))}var v=[];if(localStorage.sEvents){var u=localStorage.sEvents;v=JSON.parse(u)}t(function(){});for(var p=0;p<v.length;p++)t("#lblEvents").append('<tr><th scope="row"><h4>'+v[p].id+"</h4></th><td><h4>"+v[p].name+'</h4></td><td><i class="fa fa-trash" aria-hidden="true"></i></td></tr>');if(t("#postbtn").on("click",function(){var e=(new Date).getTime(),n=t("#inputpostimg").val(),o=t("#inputpostevent").val(),l=t("#inputpostdesc").val(),i=t("#inputpostlocation").val(),s="link";t("#lblEvents").append("<tr><td>"+o+"</td><td>"+i+"</td><td>"+e+"</td><td>"+s+'</td><td><i class="fa fa-trash" aria-hidden="true"></i></td></tr>'),a("wdw-calendar");var c={};c.id=(new Date).getTime(),c.imageUrl=n,c.postevent=o,c.PostDesc=l,c.sPostLocation=i,v.push(c);var d=JSON.stringify(v);localStorage.sEvents=d}),t("#lblEvents div").each(function(e){console.log(e+": "+t(this).text()),t(this).css}),t("#searchEvents").on("click",function(){var e=t("#searchfront").val(),n=e.split(" "),o=[];console.log(n);var a=JSON.parse(localStorage.events);n.forEach(function(t){var e=t;a.forEach(function(t){var n=t.name,a=(t.topic,t.level),l=t.speaker_organization;t.location;i(e,n,t,o),i(e,a,t,o),i(e,l,t,o)})}),console.log(o);var l=o.filter(function(t,e,n){return e==n.indexOf(t)});console.log(l),t("#event-listing").empty();var s=l.length/3;console.log("The base number is: "+s),l.forEach(function(e){var n=e.topic;console.log(l.length),console.log(e.name),t("#event-listing").append('            <div class="event-thirds" data-event-id="'+e.id+'">              <div>                <h1>'+e.name+"</h1>                <h2>"+n+"</h2>                <h5>"+e.date.day+"-"+e.date.month+"-"+e.date.year+"</h5>              </div>            </div>          ")})}),null==localStorage.events)console.log("localStorage.events is empty"),t.getJSON("assets/data/events.json").done(function(e){console.log(e);var n=JSON.stringify(e);localStorage.events=n,console.log("localStorage.events successfully populated");var o=localStorage.events,a=JSON.parse(o);a.forEach(function(e){if(a.indexOf(e)<=9){console.log("works");var n=e.topic;t("#event-listing").append('              <div class="event-thirds" data-event-id="'+e.id+'">                <div>                  <h1>'+e.name+"</h1>                  <h2>"+n+"</h2>                  <h5>"+e.date.day+"-"+e.date.month+"-"+e.date.year+"</h5>                </div>              </div>          ")}}),l()});else if(localStorage.events){console.log("localStorage.events has data");var f=localStorage.events,m=JSON.parse(f);m.forEach(function(e){if(m.indexOf(e)<=9){console.log("works");var n=e.topic;t("#event-listing").append('            <div class="event-thirds" data-event-id="'+e.id+'">              <div>                <h1>'+e.name+"</h1>                <h2>"+n+"</h2>                <h5>"+e.date.day+"-"+e.date.month+"-"+e.date.year+"</h5>              </div>            </div>        ")}}),l()}t(n).ready(function(){a("wdw-home"),t("#wdw-event-listing").fadeIn(500)}),t("#searchfront").keyup(function(){c(),console.log("searchign,")}),t("#myInput").keyup(function(){d()}),t(n).ready(function(){g()}),t("#loginbtn").on("click",function(){var e=JSON.parse(localStorage.getItem("credentials")),n=JSON.parse(localStorage.getItem("credentialsMember")),o=t("#inputusername").val(),l=t("#inputpassword").val();e.username===o&&e.password===l||n.username===o&&n.password===l?(console.log("Welcome Mr.   "+e.username),s(),t(".brand h1").text("Logged in as Admin # "+e.username),a("wdw-index"),console.log(n.username+n.password)):console.log("failed login")}),t("#memberbtn").on("click",function(){var e=t("#inputfnamereg").val(),n=t("#inputlnamereg").val(),o=t("#inputemailreg").val(),l=t("#inputlocationreg").val(),i=t("#inputusernamereg").val(),s=t("#inputpasswordreg").val(),c={fname:e,lname:n,email:o,location:l,usernam:i,password:s};localStorage.setItem("credentialsMember",JSON.stringify(c)),console.log("Local Storage store",c),a("wdw-login")}),t("#postbtn").on("click",function(){r(),console.log("post event")}),t("#linkLogin").on("click",function(){a("wdw-login"),console.log("Nav - login clicked")}),t("#linkHome").on("click",function(){a("wdw-home"),console.log("Nav - Home Clicked ")}),t("#linkEvents").on("click",function(){a("wdw-events"),console.log("Nav - Link Event")}),t("#linkNews").on("click",function(){a("wdw-news"),console.log("Nav - News clicked")}),t("#linkCalendar").on("click",function(){a("wdw-calendar"),console.log("Nav - Calendar clicked")}),t("#linkAllEvents").on("click",function(){a("wdw-all-events"),console.log("Nav - all events click")}),t("#btnpostevent").on("click",function(){a("wdw-post-event"),console.log("Postclicke")}),v.indexOf(this),t(".fa-fa-trash").click(function(){console.log("Trashed clicked",v,v[p],v.length),v.splice(1,1)}),t("#manage-events").on("click",function(){a("wdw-manage-events"),console.log("manage events clicked ")}),t("#manage-users").on("click",function(){a("wdw-manage-users"),console.log("manage users clicked ")}),t("#registermember").on("click",function(){a("wdw-index"),console.log("manage-members clicked")}),t(".fa-fa-trash").click(function(){t(this).parent().hide(),console.log("Trash delete clicked ")})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
